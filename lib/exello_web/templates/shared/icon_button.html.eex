<%#= raise Enum.map(Map.take(assigns, [:to, :data, :method, :class]), fn {key, value} -> {key, value} end) %>
<%= if @icon == "back" do %>
  <%= link raw("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' style='display: inline !important; width: 1rem' fill='currentColor'>
    <path fill-rule='evenodd' d='M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z' clip-rule='evenodd' />
  </svg>" <> Map.get(assigns, :text, "")), Keyword.new(Map.take(assigns, [:to, :data, :method, :class]), fn {k,v} -> {k, v} end) %>
<% end %>
<%= if @icon == "delete" do %>
  <%= link raw("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' style='display: inline !important; width: 1rem' fill='currentColor'>
    <path fill-rule='evenodd' d='M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z' clip-rule='evenodd' />
  </svg>" <> Map.get(assigns, :text, "")), Keyword.new(Map.take(assigns, [:to, :data, :method, :class]), fn {k,v} -> {k, v} end) %>
<% end %>
<%= if @icon == "new" do %>
  <%= link raw("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' style='display: inline !important; width: 1rem' fill='currentColor'>
    <path fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z' clip-rule='evenodd' />
  </svg>" <> Map.get(assigns, :text, "")), Keyword.new(Map.take(assigns, [:to, :data, :method, :class]), fn {k,v} -> {k, v} end) %>
<% end %>
<%= if @icon == "edit" do %>
  <%= link raw("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' style='display: inline !important; width: 1rem' fill='currentColor'>
    <path d='M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z' />
  </svg>" <> Map.get(assigns, :text, "")), Keyword.new(Map.take(assigns, [:to, :method, :data, :method, :class]), fn {k,v} -> {k, v} end) %>
<% end %>
